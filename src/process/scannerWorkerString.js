export const workerCode = `var m=require("worker_threads");var l=require("fs/promises"),g=async()=>{try{let i=(await l.readdir("/proc",{withFileTypes:!0})).filter((t)=>t.isDirectory()&&/^\\d+$/.test(t.name)).map(async(t)=>{let o=+t.name;try{let c=await Promise.race([l.readFile(\`/proc/\${o}/cmdline\`,"utf8"),new Promise((r,f)=>setTimeout(()=>f(new Error("Timeout")),100))]);try{if((await l.readFile(\`/proc/\${o}/status\`,"utf8")).includes("State:\\tT"))return null}catch(r){}let a;try{a=await l.readlink(\`/proc/\${o}/cwd\`)}catch(r){}let n=c.split("\\x00").filter((r)=>r.trim()!=="");return n.length?[o,n[0],n.slice(1),a]:null}catch{return null}});return(await Promise.all(i)).filter(Boolean)}catch(s){return console.error("Process discovery error:",s),[]}};var p=require("child_process"),h=()=>new Promise((s)=>p.exec("wmic process get ProcessID,ExecutablePath /format:csv",(i,e)=>{s(e.toString().split(\`\\r
\`).slice(2).map((t)=>{let o=t.trim().split(",").slice(1).reverse();return[parseInt(o[0])||o[0],o[1]]}).filter((t)=>t[1]))}));var P=process.platform==="linux"?g:h,u;function w(s){let e=s.toLowerCase().replaceAll("\\\\","/").split("/");if(/^[a-z]:$/.test(e[0])||e[0]==="")e.shift();let t=[],o=["64",".x64","x64","_64"],c=e.length+1;t.length=c*(o.length+1);let a=0;for(let n=0;n<e.length||n===1;n++){let r=e.slice(-n).join("/");t[a++]=r;for(let f of o)if(r.includes(f))t[a++]=r.replace(f,"")}return t.filter(Boolean)}function x(s,i,e,t){if(!s)return!1;if(!(!s.a||e&&e.includes(s.a)))return!1;return s.n.some((c)=>{if(c[0]===">")return c.substring(1)===i[0];return i.some((a)=>c===a||t&&\`\${t}/\${a}\`.includes(\`/\${c}\`))})}async function b(){try{let s=await P(),i=new Set;for(let[e,t,o,c=""]of s){let a=w(t);for(let n of u)try{let{e:r,i:f,n:y}=n;if(x(r,a,o,c))i.add({id:f,name:y,pid:e})}catch(r){m.parentPort.postMessage({type:"error",error:"Error during processing: "+r+\`
Caused by: \`+JSON.stringify(n)})}}m.parentPort.postMessage({type:"scan_results",games:Array.from(i)})}catch(s){m.parentPort.postMessage({type:"error",error:s.message})}}m.parentPort.on("message",async(s)=>{switch(s.type){case"init":u=s.detectable,m.parentPort.postMessage({type:"initialized"});break;case"scan":await b();break}});
`;