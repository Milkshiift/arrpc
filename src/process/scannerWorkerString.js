export const workerCode = `import{parentPort as O}from"worker_threads";import{readdir as S,readFile as Q,readlink as V}from"fs/promises";import{exec as X}from"child_process";var Y=async()=>{try{let M=(await S("/proc",{withFileTypes:!0})).filter((y)=>y.isDirectory()&&/^\\d+$/.test(y.name)).map(async(y)=>{let A=+y.name;try{let I=await Promise.race([Q(\`/proc/\${A}/cmdline\`,"utf8"),new Promise((H,N)=>setTimeout(()=>N(new Error("Timeout")),100))]);try{if((await Q(\`/proc/\${A}/status\`,"utf8")).includes("State:\\tT"))return null}catch(H){}let J;try{J=await V(\`/proc/\${A}/cwd\`)}catch(H){}let K=I.split("\\x00").filter((H)=>H.trim()!=="");return K.length?[A,K[0],K.slice(1),J]:null}catch{return null}});return(await Promise.all(M)).filter(Boolean)}catch(q){return console.error("Process discovery error:",q),[]}},Z=()=>new Promise((q)=>X("wmic process get ProcessID,ExecutablePath /format:csv",(M,z)=>{q(z.toString().split(\`\\r
\`).slice(2).map((y)=>{let A=y.trim().split(",").slice(1).reverse();return[parseInt(A[0])||A[0],A[1]]}).filter((y)=>y[1]))})),$=process.platform==="linux"?Y:Z,R;function C(q){let z=q.toLowerCase().replaceAll("\\\\","/").split("/");if(/^[a-z]:$/.test(z[0])||z[0]==="")z.shift();let y=[],A=["64",".x64","x64","_64"],I=z.length+1;y.length=I*(A.length+1);let J=0;for(let K=0;K<z.length||K===1;K++){let H=z.slice(-K).join("/");y[J++]=H;for(let N of A)if(H.includes(N))y[J++]=H.replace(N,"")}return y.filter(Boolean)}function E(q,M,z,y){if(!q)return!1;if(!(!q.a||z&&z.includes(q.a)))return!1;return q.n.some((I)=>{if(I[0]===">")return I.substring(1)===M[0];return M.some((J)=>I===J||y&&\`\${y}/\${J}\`.includes(\`/\${I}\`))})}async function T(){try{let q=await $(),M=new Set;for(let[z,y,A,I=""]of q){let J=C(y);for(let{e:K,i:H,n:N}of R)if(E(K,J,A,I))M.add({id:H,name:N,pid:z})}O.postMessage({type:"scan_results",games:Array.from(M)})}catch(q){O.postMessage({type:"error",error:q.message})}}O.on("message",async(q)=>{switch(q.type){case"init":R=q.detectable,O.postMessage({type:"initialized"});break;case"scan":await T();break}});export{Z as getProcessesWindows,Y as getProcessesLinux};
`;